import * as React from "react"
import { Frame, Scroll, addPropertyControls, ControlType } from "framer"

export function PageScroller(props) {
    React.useEffect(() => {
        const child = props.children[0]
        setState({
            contentH: child ? child.props["height"] : 0,
            scrollBarHeight: scrollBarHeight(
                0,
                child ? child.props["height"] : 0
            ),
            scrollBarYPos: scrollBarAmount(
                0,
                child ? child.props["height"] : 0
            ),
            scrollBarOpacity: props.autoHide ? 0 : 1,
            delay: 0,
            duration: 0,
        })
    }, [
        props.autoHide,
        props.offsetBot,
        props.offsetTop,
        props.height,
        props.width,
        props.children,
    ])

    const [state, setState] = React.useState({
        contentH: 0,
        scrollBarHeight: scrollBarHeight(0, 0),
        scrollBarYPos: scrollBarAmount(0, 0),
        scrollBarOpacity: props.autoHide ? 0 : 1,
        delay: 0,
        duration: 0,
    })

    function scrollBarHeight(y: number, contentH: number) {
        const height = props.height // get height of scroll viewbox
        let barHeight = Math.round(height / (contentH / height)) // set default height of bar
        height > contentH ? (barHeight = height) : barHeight // if scrollbox is longer than scroll content
        y >= 0 ? (barHeight += -y) : null // overdrag down shortens the scroll bar
        height > contentH && -y >= 0 ? (barHeight += y) : null // overdrag up shortens the bar height
        height < contentH && -y >= contentH - height // overdrag up bar height when conntent longer
            ? (barHeight += -(-y - (contentH - height)))
            : null
        barHeight += -10 - props.offsetTop - props.offsetBot //remove 10 pixels + offset to adjust for offsets
        return barHeight < 10 ? 10 : barHeight // return a minimum bar height of 10 pixels
    }

    function scrollBarAmount(y: number, contentH: number) {
        const height = props.height // get height of scroll viewbox
        let scrollAmount
        if (y >= 0) {
            scrollAmount = 0 //overdarg down does nothing to the scrollbar position
        } else if (state.scrollBarHeight <= 10) {
            scrollAmount = state.scrollBarYPos //overdarg up does nothing to the scrollbar position
        } else if (height > state.contentH && -y >= 0) {
            scrollAmount = -y // scrollbox taller than content so direct scroll impact
        } else if (-y >= state.contentH - height) {
            scrollAmount =
                (state.contentH - height) / (state.contentH / height) +
                (-y - (state.contentH - height))
        } else {
            scrollAmount = Math.round(-y / (state.contentH / height)) //just the regular scroll
        }
        return scrollAmount
    }

    function doScroll(info) {
        setState({
            contentH: state.contentH,
            scrollBarHeight: scrollBarHeight(
                Math.round(info.point.y),
                state.contentH
            ),
            scrollBarYPos: scrollBarAmount(
                Math.round(info.point.y),
                state.contentH
            ),
            scrollBarOpacity: 1,
            delay: 0,
            duration: 0,
        })
    }

    // hides the scroll bar after darg end automatically
    function hideScrollBar(info) {
        setState({
            contentH: state.contentH,
            scrollBarHeight: scrollBarHeight(
                Math.round(info.point.y),
                state.contentH
            ),
            scrollBarYPos: scrollBarAmount(
                Math.round(info.point.y),
                state.contentH
            ),
            scrollBarOpacity: 0,
            delay: 0.6,
            duration: 0.4,
        })
    }

    return (
        <Frame top={0} right={0} left={0} bottom={0} background={props.bgColor}>
            <Scroll
                background={"none"}
                direction={"vertical"}
                directionLock={true}
                onScroll={doScroll}
                onScrollEnd={props.autoHide ? hideScrollBar : null}
                top={0}
                right={0}
                left={0}
                bottom={0}
            >
                {props.children}
            </Scroll>
            <Frame
                animate={{
                    opacity: state.scrollBarOpacity,
                }}
                transition={{
                    duration: state.duration,
                    delay: state.delay,
                    ease: "linear",
                }}
                opacity={props.autoHide ? 0 : 1}
                width={props.barWidth}
                height={state.scrollBarHeight}
                backgroundColor={
                    props.barColor === "0"
                        ? "rgba(0,0,0,0.4)"
                        : "rgba(255,255,255,0.4)"
                }
                top={state.scrollBarYPos + 5 + props.offsetTop} //add 5 pixkes to avoid hitting edge of screen
                right={props.barMargin}
                radius={150}
            />
        </Frame>
    )
}

PageScroller.defaultProps = {
    contentH: 0,
    scrollBarHeight: 100,
    offsetTop: 0,
    offsetBot: 0,
    bgColor: "none",
    barColor: "0",
    vOffSet: 0,
    barWidth: 6,
    autoHide: true,
    barMargin: 5,
}

addPropertyControls(PageScroller, {
    bgColor: { type: ControlType.Color, title: "Background" }, // scroll BG color (optional)
    offsetTop: { type: ControlType.Number, title: "Offset Top" }, //use this to allow scrolling below headers, etc.
    offsetBot: { type: ControlType.Number, title: "Offset Bottom" }, //use this to allow scrolling below status bar, etc.
    barColor: {
        type: ControlType.Enum,
        title: "Scroll Bar Color",
        options: ["0", "1"],
        optionTitles: ["Dark", "Light"],
    }, // set based on the overall background of the scroll box
    barWidth: { type: ControlType.Number, title: "Bar Width" }, //use this to allow scrolling below headers, etc.
    barMargin: { type: ControlType.Number, title: "Bar Margin" }, //maring to right of box
    autoHide: { type: ControlType.Boolean, title: "Auto Hide Bar" }, //auto hide scroll bar
})
